xquery version '1.0-ml';
module namespace namespace_testing_version_translator-from-model_1ns
    = 'http://marklogic.com/nstrans#Namespace_testing_version_translator-0.0.1-from-Model_1ns-0.0.1';

import module namespace es = 'http://marklogic.com/entity-services'
    at '/MarkLogic/entity-services/entity-services.xqy';

declare namespace cust = 'http://marklogic.com/customer';
 declare namespace prod = 'http://marklogic.com/product';
 declare namespace store = 'http://marklogic.com/store';
 declare namespace sup = 'http://marklogic.com/super';


declare option xdmp:mapping 'false';

(:
 This module was generated by MarkLogic Entity Services.
 Its purpose is to create instances of entity types
 defined in
 Namespace_testing_version_translator, version 0.0.1
 from documents that were persisted according to model
 Model_1ns, version 0.0.1


 For usage and extension points, see the Entity Services Developer's Guide

 https://docs.marklogic.com/guide/entity-services

 Generated at timestamp: 2017-11-01T09:53:56.532182-07:00

 Target Model Namespace_testing_version_translator-0.0.1 Info:

 Type Customer: 
    primaryKey: CustomerID, ( in source: CustomerID )
    required: CustomerID, ( in source: CustomerID )
    range indexes: CustomerID, ( in source: CustomerID )
    word lexicons: None, ( in source: None )
    namespace: None, ( in source: http://marklogic.com/customer )
    namespace prefix: None, ( in source: cust )
 
 Type Product: 
    primaryKey: None, ( in source: None )
    required: ProductID, ( in source: ProductID )
    range indexes: UnitPrice, ( in source: UnitPrice )
    word lexicons: None, ( in source: None )
    namespace: http://marklogic.com/product, ( in source: None )
    namespace prefix: prod, ( in source: None )
 
 Type Order: 
    primaryKey: None, ( in source: None )
    required: OrderID, ( in source: OrderID )
    range indexes: OrderDate, ( in source: OrderDate )
    word lexicons: OrderDetails, ( in source: OrderDetails )
    namespace: None, ( in source: None )
    namespace prefix: None, ( in source: None )
 
 Type OrderDetail: 
    primaryKey: None, ( in source: None )
    required: None, ( in source: None )
    range indexes: None, ( in source: None )
    word lexicons: None, ( in source: None )
    namespace: None, ( in source: None )
    namespace prefix: None, ( in source: None )
 
 Type Superstore: 
    primaryKey: OrdID, ( in source: OrdID )
    required: None, ( in source: None )
    range indexes: None, ( in source: None )
    word lexicons: Ship-Address, ( in source: Ship-Address )
    namespace: http://marklogic.com/store, ( in source: http://marklogic.com/super )
    namespace prefix: store, ( in source: sup )
 
 Type ShipDetails: 
    primaryKey: None, ( in source: None )
    required: None, ( in source: None )
    range indexes: None, ( in source: None )
    word lexicons: None, ( in source: None )
    namespace: None, ( in source: None )
    namespace prefix: None, ( in source: None )
 
:)


(:~
 : Creates a map:map instance representation of the target
 : entity type Customer from an envelope document
 : containing a source entity instance, that is, instance data
 : of type Customer, version 0.0.1.
 : @param $source  An Entity Services envelope document (<es:envelope>)
 :  or a canonical XML instance of type Customer.
 : @return A map:map instance that holds the data for Customer,
 :  version 0.0.1.
 :)

declare function namespace_testing_version_translator-from-model_1ns:convert-instance-Customer(
    $source as node()
) as map:map
{
    let $source-node := es:init-translation-source($source, 'Customer')

    let $CustomerID := $source-node/cust:CustomerID ! xs:string(.)
    let $CompanyName := $source-node/cust:CompanyName ! xs:string(.)
    let $Country := $source-node/cust:Country ! xs:string(.)
    let $Address := $source-node/cust:Address ! xs:string(.)

    return
        es:init-instance($source, "Customer")
       (: Copy attachments from source document to the target :)
        =>es:copy-attachments($source-node)
    (: The following lines are generated from the "Customer" entity type. :)
    =>   map:with('CustomerID',   $CustomerID)
    =>es:optional('CompanyName',   $CompanyName)
    =>es:optional('Country',   $Country)
    =>es:optional('Address',   $Address)

};
    
(:~
 : Creates a map:map instance representation of the target
 : entity type Order from an envelope document
 : containing a source entity instance, that is, instance data
 : of type Order, version 0.0.1.
 : @param $source  An Entity Services envelope document (<es:envelope>)
 :  or a canonical XML instance of type Order.
 : @return A map:map instance that holds the data for Order,
 :  version 0.0.1.
 :)

declare function namespace_testing_version_translator-from-model_1ns:convert-instance-Order(
    $source as node()
) as map:map
{
    let $source-node := es:init-translation-source($source, 'Order')

    let $OrderID := $source-node/OrderID ! xs:integer(.)
    let $hasCustomerID := $source-node/hasCustomerID ! xs:string(.)
    let $OrderDate := $source-node/OrderDate ! xs:dateTime(.)
    let $ShipAddress := $source-node/ShipAddress ! xs:string(.)
    let $extract-reference-OrderDetail := 
        function($path) { 
         if ($path/*)
         then namespace_testing_version_translator-from-model_1ns:convert-instance-OrderDetail($path)
         else es:init-instance($path, 'OrderDetail')
         }

    let $OrderDetails := es:extract-array($source-node/OrderDetails/*, $extract-reference-OrderDetail)

    return
        es:init-instance($source, "Order")
       (: Copy attachments from source document to the target :)
        =>es:copy-attachments($source-node)
    (: The following lines are generated from the "Order" entity type. :)
    =>   map:with('OrderID',   $OrderID)
    =>es:optional('hasCustomerID',   $hasCustomerID)
    =>es:optional('OrderDate',   $OrderDate)
    =>es:optional('ShipAddress',   $ShipAddress)
    =>es:optional('OrderDetails',   $OrderDetails)

};
    
(:~
 : Creates a map:map instance representation of the target
 : entity type OrderDetail from an envelope document
 : containing a source entity instance, that is, instance data
 : of type OrderDetail, version 0.0.1.
 : @param $source  An Entity Services envelope document (<es:envelope>)
 :  or a canonical XML instance of type OrderDetail.
 : @return A map:map instance that holds the data for OrderDetail,
 :  version 0.0.1.
 :)

declare function namespace_testing_version_translator-from-model_1ns:convert-instance-OrderDetail(
    $source as node()
) as map:map
{
    let $source-node := es:init-translation-source($source, 'OrderDetail')

    let $hasProductID := $source-node/hasProductID ! xs:integer(.)
    let $hasUnitPrice := $source-node/hasUnitPrice ! xs:double(.)
    let $Quantity := $source-node/Quantity ! xs:integer(.)

    return
        es:init-instance($source, "OrderDetail")
       (: Copy attachments from source document to the target :)
        =>es:copy-attachments($source-node)
    (: The following lines are generated from the "OrderDetail" entity type. :)
    =>es:optional('hasProductID',   $hasProductID)
    =>es:optional('hasUnitPrice',   $hasUnitPrice)
    =>es:optional('Quantity',   $Quantity)

};
    
(:~
 : Creates a map:map instance representation of the target
 : entity type Product from an envelope document
 : containing a source entity instance, that is, instance data
 : of type Product, version 0.0.1.
 : @param $source  An Entity Services envelope document (<es:envelope>)
 :  or a canonical XML instance of type Product.
 : @return A map:map instance that holds the data for Product,
 :  version 0.0.1.
 :)

declare function namespace_testing_version_translator-from-model_1ns:convert-instance-Product(
    $source as node()
) as map:map
{
    let $source-node := es:init-translation-source($source, 'Product')

    let $ProductName := $source-node/ProductName ! xs:string(.)
    let $ProductID := $source-node/ProductID ! xs:integer(.)
    let $UnitPrice := $source-node/UnitPrice ! xs:double(.)
    let $SupplierID := $source-node/SupplierID ! xs:integer(.)
    let $Discontinued := $source-node/Discontinued ! xs:boolean(.)

    return
        es:init-instance($source, "Product")
        =>es:with-namespace('http://marklogic.com/product','prod')
       (: Copy attachments from source document to the target :)
        =>es:copy-attachments($source-node)
    (: The following lines are generated from the "Product" entity type. :)
    =>es:optional('ProductName',   $ProductName)
    =>   map:with('ProductID',   $ProductID)
    =>es:optional('UnitPrice',   $UnitPrice)
    =>es:optional('SupplierID',   $SupplierID)
    =>es:optional('Discontinued',   $Discontinued)

};
    
(:~
 : Creates a map:map instance representation of the target
 : entity type ShipDetails from an envelope document
 : containing a source entity instance, that is, instance data
 : of type ShipDetails, version 0.0.1.
 : @param $source  An Entity Services envelope document (<es:envelope>)
 :  or a canonical XML instance of type ShipDetails.
 : @return A map:map instance that holds the data for ShipDetails,
 :  version 0.0.1.
 :)

declare function namespace_testing_version_translator-from-model_1ns:convert-instance-ShipDetails(
    $source as node()
) as map:map
{
    let $source-node := es:init-translation-source($source, 'ShipDetails')

    let $Province := $source-node/Province ! xs:string(.)
    let $Region := $source-node/Region ! xs:string(.)
    let $ShipMode := $source-node/ShipMode ! xs:string(.)
    let $ShippingCost := $source-node/ShippingCost ! xs:double(.)

    return
        es:init-instance($source, "ShipDetails")
       (: Copy attachments from source document to the target :)
        =>es:copy-attachments($source-node)
    (: The following lines are generated from the "ShipDetails" entity type. :)
    =>es:optional('Province',   $Province)
    =>es:optional('Region',   $Region)
    =>es:optional('ShipMode',   $ShipMode)
    =>es:optional('ShippingCost',   $ShippingCost)

};
    
(:~
 : Creates a map:map instance representation of the target
 : entity type Superstore from an envelope document
 : containing a source entity instance, that is, instance data
 : of type Superstore, version 0.0.1.
 : @param $source  An Entity Services envelope document (<es:envelope>)
 :  or a canonical XML instance of type Superstore.
 : @return A map:map instance that holds the data for Superstore,
 :  version 0.0.1.
 :)

declare function namespace_testing_version_translator-from-model_1ns:convert-instance-Superstore(
    $source as node()
) as map:map
{
    let $source-node := es:init-translation-source($source, 'Superstore')

    let $OrdID := $source-node/sup:OrdID ! xs:integer(.)
    let $CustID := $source-node/sup:CustID ! xs:string(.)
    let $OrdDate := $source-node/sup:OrdDate ! xs:dateTime(.)
    let $ShippedDate := $source-node/sup:ShippedDate ! xs:dateTime(.)
    let $Product-Name := $source-node/sup:Product-Name ! xs:string(.)
    let $Unit-Price := $source-node/sup:Unit-Price ! xs:double(.)
    let $Quant := $source-node/sup:Quant ! xs:integer(.)
    let $Discount := $source-node/sup:Discount ! xs:string(.)
    let $extract-reference-ShipDetails := 
        function($path) { 
         if ($path/*)
         then namespace_testing_version_translator-from-model_1ns:convert-instance-ShipDetails($path)
         else es:init-instance($path, 'ShipDetails')
         }

    let $Ship-Address := es:extract-array($source-node/sup:Ship-Address/*, $extract-reference-ShipDetails)

    return
        es:init-instance($source, "Superstore")
        =>es:with-namespace('http://marklogic.com/store','store')
       (: Copy attachments from source document to the target :)
        =>es:copy-attachments($source-node)
    (: The following lines are generated from the "Superstore" entity type. :)
    =>   map:with('OrdID',   $OrdID)
    =>es:optional('CustID',   $CustID)
    =>es:optional('OrdDate',   $OrdDate)
    =>es:optional('ShippedDate',   $ShippedDate)
    =>es:optional('Product-Name',   $Product-Name)
    =>es:optional('Unit-Price',   $Unit-Price)
    =>es:optional('Quant',   $Quant)
    =>es:optional('Discount',   $Discount)
    =>es:optional('Ship-Address',   $Ship-Address)

};
    