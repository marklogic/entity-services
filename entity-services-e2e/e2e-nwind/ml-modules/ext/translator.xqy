xquery version '1.0-ml';
module namespace northwind-from-northwind
    = 'http://marklogic.com/test#Northwind-0.0.2-from-Northwind-0.0.1';

import module namespace es = 'http://marklogic.com/entity-services'
    at '/MarkLogic/entity-services/entity-services.xqy';

declare option xdmp:mapping 'false';

(:
 This module was generated by MarkLogic Entity Services.
 Its purpose is to create instances of entity types
 defined in
 Northwind, version 0.0.2
 from documents that were persisted according to model
 Northwind, version 0.0.1


 For usage and extension points, see the Entity Services Developer's Guide

 https://docs.marklogic.com/guide/entity-services

 Generated at timestamp: 2017-09-15T13:54:23.208131-07:00

 Target Model Northwind-0.0.2 Info:

 Type Customer: 
    primaryKey: CustomerID, ( in source: CustomerID )
    required: None, ( in source: None )
    range indexes: CustomerID, CompanyName, ContactName, ( in source: CustomerID, CompanyName )
    word lexicons: CustomerID, CompanyName, Phone, ContactName, ( in source: CustomerID, CompanyName )
 
 Type Product: 
    primaryKey: ProductID, ( in source: ProductID )
    required: ProductID, ( in source: ProductID )
    range indexes: ProductID, ProductName, UnitPrice, ( in source: ProductID )
    word lexicons: ProductName, UnitPrice, ( in source: None )
 
 Type Order: 
    primaryKey: OrderID, ( in source: OrderID )
    required: None, ( in source: None )
    range indexes: OrderID, ShipName, hasCustomerID, ( in source: None )
    word lexicons: OrderID, hasCustomerID, ( in source: None )
 
 Type OrderDetail: 
    primaryKey: None, ( in source: None )
    required: None, ( in source: None )
    range indexes: None, ( in source: None )
    word lexicons: None, ( in source: None )
 
 Type Superstore: 
    Removed Type
 
 Type ShipDetails: 
    Removed Type
 
:)


(:~
 : Creates a map:map instance representation of the target
 : entity type Customer from an envelope document
 : containing a source entity instance, that is, instance data
 : of type Customer, version 0.0.1.
 : @param $source  An Entity Services envelope document (<es:envelope>)
 :  or a canonical XML instance of type Customer.
 : @return A map:map instance that holds the data for Customer,
 :  version 0.0.2.
 :)

declare function northwind-from-northwind:convert-instance-Customer(
    $source as node()
) as map:map
{
    let $source-node := es:init-translation-source($source, 'Customer')

    let $CustomerID := $source-node/CustomerID ! xs:string(.)
    let $CompanyName := $source-node/CompanyName ! xs:string(.)
    let $Country := $source-node/Country ! xs:string(.)
    let $ContactName := $source-node/ContactName ! xs:string(.)
    let $Phone := $source-node/Phone ! xs:string(.)
    let $ContactTitle := $source-node/ContactTitle ! xs:string(.)

    return
    json:object()
    =>map:with("$type", "Customer")
    (: Copy attachments from source document to the target :)
    =>es:copy-attachments($source-node)
    (: The following lines are generated from the "Customer" entity type. :)
    =>   map:with('CustomerID',   $CustomerID)
    =>es:optional('CompanyName',   $CompanyName)
    =>es:optional('Country',   $Country)
    =>es:optional('ContactName',   $ContactName)
    =>es:optional('Phone',   $Phone)
    (: The following properties are in the source, but not the target: 
    =>es:optional('NO TARGET',      $ContactTitle)
  :)

};
    
(:~
 : Creates a map:map instance representation of the target
 : entity type Order from an envelope document
 : containing a source entity instance, that is, instance data
 : of type Order, version 0.0.1.
 : @param $source  An Entity Services envelope document (<es:envelope>)
 :  or a canonical XML instance of type Order.
 : @return A map:map instance that holds the data for Order,
 :  version 0.0.2.
 :)

declare function northwind-from-northwind:convert-instance-Order(
    $source as node()
) as map:map
{
    let $source-node := es:init-translation-source($source, 'Order')

    let $OrderID := $source-node/OrderID ! xs:integer(.)
    let $extract-reference-Customer := 
        function($path) { 
         if ($path/*)
         then northwind-from-northwind:convert-instance-Customer($path)
         else es:init-instance($path, 'Customer')
         }

    let $hasCustomerID := $source-node/hasCustomerID/* ! $extract-reference-Customer(.)
    let $OrderDate := $source-node/OrderDate ! xs:dateTime(.)
    let $ShippedDate := $source-node/ShippedDate ! xs:dateTime(.)
    (: The following property was missing from the source type.
       The XPath will not up-convert without intervention.  
       Modified the xpath to refer attachments in the version 1 envelope.  :)
    let $ShipName := $source-node/root()//es:attachments/Order/ShipName ! xs:string(.)
    let $ShipAddress := $source-node/ShipAddress ! xs:string(.)
    let $extract-reference-OrderDetail := 
        function($path) { 
         if ($path/*)
         then northwind-from-northwind:convert-instance-OrderDetail($path)
         else es:init-instance($path, 'OrderDetail')
         }

    let $OrderDetails := es:extract-array($source-node/OrderDetails/*, $extract-reference-OrderDetail)

    return
    json:object()
    =>map:with("$type", "Order")
    (: Copy attachments from source document to the target :)
    =>es:copy-attachments($source-node)
    (: The following lines are generated from the "Order" entity type. :)
    =>   map:with('OrderID',   $OrderID)
    =>es:optional('hasCustomerID',   $hasCustomerID)
    =>es:optional('OrderDate',   $OrderDate)
    =>es:optional('ShippedDate',   $ShippedDate)
    =>es:optional('ShipName',   $ShipName)
    =>es:optional('ShipAddress',   $ShipAddress)
    =>es:optional('OrderDetails',   $OrderDetails)

};
    
(:~
 : Creates a map:map instance representation of the target
 : entity type OrderDetail from an envelope document
 : containing a source entity instance, that is, instance data
 : of type OrderDetail, version 0.0.1.
 : @param $source  An Entity Services envelope document (<es:envelope>)
 :  or a canonical XML instance of type OrderDetail.
 : @return A map:map instance that holds the data for OrderDetail,
 :  version 0.0.2.
 :)

declare function northwind-from-northwind:convert-instance-OrderDetail(
    $source as node()
) as map:map
{
    let $source-node := es:init-translation-source($source, 'OrderDetail')

    let $extract-reference-Product := 
        function($path) { 
         if ($path/*)
         then northwind-from-northwind:convert-instance-Product($path)
         else es:init-instance($path, 'Product')
         }

    let $hasProductID := $source-node/hasProductID/* ! $extract-reference-Product(.)
    let $hasUnitPrice := $source-node/hasUnitPrice ! xs:double(.)
    let $Quantity := $source-node/Quantity ! xs:integer(.)

    return
    json:object()
    =>map:with("$type", "OrderDetail")
    (: Copy attachments from source document to the target :)
    =>es:copy-attachments($source-node)
    (: The following lines are generated from the "OrderDetail" entity type. :)
    =>es:optional('hasProductID',   $hasProductID)
    =>es:optional('hasUnitPrice',   $hasUnitPrice)
    =>es:optional('Quantity',   $Quantity)

};
    
(:~
 : Creates a map:map instance representation of the target
 : entity type Product from an envelope document
 : containing a source entity instance, that is, instance data
 : of type Product, version 0.0.1.
 : @param $source  An Entity Services envelope document (<es:envelope>)
 :  or a canonical XML instance of type Product.
 : @return A map:map instance that holds the data for Product,
 :  version 0.0.2.
 :)

declare function northwind-from-northwind:convert-instance-Product(
    $source as node()
) as map:map
{
    let $source-node := es:init-translation-source($source, 'Product')

    let $ProductName := $source-node/ProductName ! xs:string(.)
    let $UnitPrice := $source-node/UnitPrice ! xs:double(.)
    let $SupplierID := $source-node/SupplierID ! xs:integer(.)
    (: The following property was missing from the source type.
       The XPath will not up-convert without intervention.  
       Modified the xpath to refer attachments in the version 1 envelope.   :)
    let $QuantityPerUnit := $source-node/root()//es:attachments/Product/QuantityPerUnit ! xs:string(.)
    let $ProductID := $source-node/ProductID ! xs:integer(.)

    return
    json:object()
    =>map:with("$type", "Product")
    (: Copy attachments from source document to the target :)
    =>es:copy-attachments($source-node)
    (: The following lines are generated from the "Product" entity type. :)
    =>es:optional('ProductName',   $ProductName)
    =>es:optional('UnitPrice',   $UnitPrice)
    =>es:optional('SupplierID',   $SupplierID)
    =>es:optional('QuantityPerUnit',   $QuantityPerUnit)
    =>   map:with('ProductID',   $ProductID)

};
    
(:
 Entity type ShipDetails is in source document
 but not in target document.
 The following XPath expressions should get values from the source
 instances but there is no specified target.
 This comment can be as a starting point for writing a custom
 version converter.

declare function northwind-from-northwind:convert-instance-ShipDetails(
    $source-node as node()
) as map:map
{
    let $Province  :=             $source-node/Province ! xs:string(.)
    let $Region  :=             $source-node/Region ! xs:string(.)
    let $ShipMode  :=             $source-node/ShipMode ! xs:string(.)
    let $ShippingCost  :=             $source-node/ShippingCost ! xs:double(.)

    return
    json:object()
    (: If the source is an envelope or part of an envelope document,
     : copies attachments to the target :)
    =>es:copy-attachments($source-node)
    =>map:with("$type", "ShipDetails" }
    =>es:optional('Province',   $Province)
    =>es:optional('Region',   $Region)
    =>es:optional('ShipMode',   $ShipMode)
    =>es:optional('ShippingCost',   $ShippingCost)

};
:)

(:
 Entity type Superstore is in source document
 but not in target document.
 The following XPath expressions should get values from the source
 instances but there is no specified target.
 This comment can be as a starting point for writing a custom
 version converter.

declare function northwind-from-northwind:convert-instance-Superstore(
    $source-node as node()
) as map:map
{
    let $OrdID  :=             $source-node/OrderID ! xs:integer(.)
    let $CustID  :=             $source-node/CustomerID ! xs:string(.)
    let $OrdDate  :=             $source-node/OrderDate ! xs:dateTime(.)
    let $Shipped-Date  :=             $source-node/ShippedDate ! xs:dateTime(.)
    let $Product-Name  :=             $source-node/ProductName ! xs:string(.)
    let $Unit-Price  :=             $source-node/UnitPrice ! xs:double(.)
    let $Quant  :=             $source-node/OrderQuantity ! xs:integer(.)
    let $Discount  :=             $source-node/Discount ! xs:string(.)
    (: The following property is a local reference.  :)
    let $Ship-Address  :=             es:extract-array($source-node, northwind-from-northwind:extract-instance-ShipDetails#1)

    return
    json:object()
    (: If the source is an envelope or part of an envelope document,
     : copies attachments to the target :)
    =>es:copy-attachments($source-node)
    =>map:with("$type", "Superstore" }
    =>   map:with('OrdID',   $OrdID)
    =>es:optional('CustID',   $CustID)
    =>es:optional('OrdDate',   $OrdDate)
    =>es:optional('Shipped-Date',   $Shipped-Date)
    =>es:optional('Product-Name',   $Product-Name)
    =>es:optional('Unit-Price',   $Unit-Price)
    =>es:optional('Quant',   $Quant)
    =>es:optional('Discount',   $Discount)
    =>es:optional('Ship-Address',   $Ship-Address)

};
:)