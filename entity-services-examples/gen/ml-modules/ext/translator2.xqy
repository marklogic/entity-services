xquery version "1.0-ml";
module namespace person-from-sP
    = "http://example.org/example-person/Person-0.0.1-from-SP-0.0.1";

import module namespace es = "http://marklogic.com/entity-services"
    at "/MarkLogic/entity-services/entity-services.xqy";

declare option xdmp:mapping "false";

(:
 This module was generated by MarkLogic Entity Services.
 Its purpose is to create instances of entity types
 defined in
 Person, version 0.0.1
 from documents that were persisted according to model
 SP, version 0.0.1

 Modification History:
 Generated at timestamp: 2016-10-19T14:20:07.535598-07:00
 Persisted by AUTHOR
 Date: DATE

 Target Model Person-0.0.1 Info:

 Type Person: 
    missing from source model.
    primaryKey: id, ( in source: None )
    required: firstName, lastName, fullName, ( in source: None )
    range indexes: None
    word lexicons: None
 
 Type Supplier: 
    Removed Type
 
 Type Part: 
    Removed Type
 
 Type Shipment: 
    Removed Type
 
:)


(:~
 : Creates a map:map instance representation of the target entity type
 : from a document that contains the source entity instance.
 : @param $source-node  A document or node that contains data conforming to the
 : source entity type
 : @return A map:map instance that holds the data for this entity type.
 :)
declare function person-from-sP:convert-instance-Person(
    $source-node as node()
) as map:map
{
    json:object()
    (: The following line identifies the type of this instance.  Do not change it. :)
    =>map:with('$type', 'Person')
    (: The following lines are generated from the 'Person' entity type. :)
    (: The following property was missing from the source type.
       The XPath will not up-convert without intervention.  :)
    =>   map:with('id',                     xs:string($source-node/Person/id))
    (: The following property was missing from the source type.
       The XPath will not up-convert without intervention.  :)
    =>   map:with('firstName',              xs:string($source-node/Person/firstName))
    (: The following property was missing from the source type.
       The XPath will not up-convert without intervention.  :)
    =>   map:with('lastName',               xs:string($source-node/Person/lastName))
    (: The following property was missing from the source type.
       The XPath will not up-convert without intervention.  :)
    =>   map:with('fullName',               xs:string($source-node/Person/fullName))
    (: The following property was missing from the source type.
       The XPath will not up-convert without intervention.  :)
    =>es:optional('friends',                es:extract-array($source-node/Person/friends, function($path) { json:object()=>map:with('$type', 'Person')=>map:with('$ref', xs:string(($path)[1]) ) }#1))
    (: The following properties are in the source, but not the target: 
No missing properties.  :)

};
    
(:
 Entity type Part is in source document
 but not in target document.
 The following XPath expressions should get values from the source
 instances but there is no specified target.
 This comment can be as a starting point for writing a custom
 version converter.

declare function person-from-sP:convert-instance-Part(
    $source-node as node()
) as map:map
{
    json:object()
    =>map:with('$type', 'Part')
    =>   map:with('pid',                    xs:integer($source-node/pid))
    =>   map:with('pName',                  xs:string($source-node/pName))
    =>   map:with('color',                  xs:integer($source-node/color))
    =>   map:with('weight',                 xs:decimal($source-node/weight))
    =>   map:with('city',                   xs:string($source-node/city))
:)

(:
 Entity type Shipment is in source document
 but not in target document.
 The following XPath expressions should get values from the source
 instances but there is no specified target.
 This comment can be as a starting point for writing a custom
 version converter.

declare function person-from-sP:convert-instance-Shipment(
    $source-node as node()
) as map:map
{
    json:object()
    =>map:with('$type', 'Shipment')
    (: The following property is a local reference.  :)
    =>es:optional('sid',                    person-from-sP:extract-instance-Supplier($source-node/sid))
    (: The following property is a local reference.  :)
    =>es:optional('pid',                    person-from-sP:extract-instance-Part($source-node/pid))
    =>es:optional('qty',                    xs:integer($source-node/qty))
:)

(:
 Entity type Supplier is in source document
 but not in target document.
 The following XPath expressions should get values from the source
 instances but there is no specified target.
 This comment can be as a starting point for writing a custom
 version converter.

declare function person-from-sP:convert-instance-Supplier(
    $source-node as node()
) as map:map
{
    json:object()
    =>map:with('$type', 'Supplier')
    =>   map:with('sid',                    xs:integer($source-node/sid))
    =>   map:with('sName',                  xs:string($source-node/sName))
    =>   map:with('status',                 xs:integer($source-node/status))
    =>   map:with('city',                   xs:string($source-node/city))
:)
