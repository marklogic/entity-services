xquery version '1.0-ml';
module namespace allDifferentTgt-from-allDifferentSrc
    = 'http://marklogic.com/versionTrans/allDifferentTgt-0.0.2-from-allDifferentSrc-0.0.1';

import module namespace es = 'http://marklogic.com/entity-services'
    at '/MarkLogic/entity-services/entity-services.xqy';



declare option xdmp:mapping 'false';

(:
 This module was generated by MarkLogic Entity Services.
 Its purpose is to create instances of entity types
 defined in
 allDifferentTgt, version 0.0.2
 from documents that were persisted according to model
 allDifferentSrc, version 0.0.1


 For usage and extension points, see the Entity Services Developer's Guide

 https://docs.marklogic.com/guide/entity-services

 Generated at timestamp: 2017-10-25T14:59:31.257402-07:00

 Target Model allDifferentTgt-0.0.2 Info:

 Type Product: 
    missing from source model.
    primaryKey: ProductName, ( in source: None )
    required: None, ( in source: None )
    range indexes: None, ( in source: None )
    word lexicons: None, ( in source: None )
    namespace: None, ( in source: None )
    namespace prefix: None, ( in source: None )
 
 Type Customer: 
    Removed Type
 
:)


(:~
 : Creates a map:map instance representation of the target
 : entity type Product from an envelope document
 : containing a source entity instance, that is, instance data
 : of type Product, version 0.0.1.
 : @param $source  An Entity Services envelope document (<es:envelope>)
 :  or a canonical XML instance of type Product.
 : @return A map:map instance that holds the data for Product,
 :  version 0.0.2.
 :)

(: Type Product is not in the source model.
 : XPath expressions are created as though there were no change between source and target type.
 :)
declare function allDifferentTgt-from-allDifferentSrc:convert-instance-Product(
    $source as node()
) as map:map
{
    let $source-node := es:init-translation-source($source, 'Product')

    let $ProductName := $source-node/ProductName ! xs:string(.)
    let $UnitPrice := $source-node/UnitPrice ! xs:integer(.)
    let $SupplierID := $source-node/SupplierID ! xs:integer(.)
    let $Discontinued := $source-node/Discontinued ! xs:boolean(.)

    return
        es:init-instance($source, "Product")
       (: Copy attachments from source document to the target :)
        =>es:copy-attachments($source-node)
    (: The following lines are generated from the "Product" entity type. :)
    =>   map:with('ProductName',   $ProductName)
    =>es:optional('UnitPrice',   $UnitPrice)
    =>es:optional('SupplierID',   $SupplierID)
    =>es:optional('Discontinued',   $Discontinued)

};
    
(:
 Entity type Customer is in source document
 but not in target document.
 The following XPath expressions should get values from the source
 instances but there is no specified target.
 This comment can be as a starting point for writing a custom
 version converter.

declare function allDifferentTgt-from-allDifferentSrc:convert-instance-Customer(
    $source-node as node()
) as map:map
{
    let $CustomerID  :=             $source-node/CustomerID ! xs:string(.)
    let $CompanyName  :=             $source-node/CompanyName ! xs:string(.)
    let $Country  :=             $source-node/Country ! xs:string(.)
    let $ContactName  :=             $source-node/ContactName ! xs:string(.)

    let $instance := es:init-instance($source-node, "Customer)")
    return
    $instance
    (: If the source is an envelope or part of an envelope document,
     : copies attachments to the target :)
    =>es:copy-attachments($source-node)

    =>   map:with('CustomerID',   $CustomerID)
    =>es:optional('CompanyName',   $CompanyName)
    =>es:optional('Country',   $Country)
    =>es:optional('ContactName',   $ContactName)

};
:)